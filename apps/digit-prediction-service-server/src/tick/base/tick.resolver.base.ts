/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tick } from "./Tick";
import { TickCountArgs } from "./TickCountArgs";
import { TickFindManyArgs } from "./TickFindManyArgs";
import { TickFindUniqueArgs } from "./TickFindUniqueArgs";
import { CreateTickArgs } from "./CreateTickArgs";
import { UpdateTickArgs } from "./UpdateTickArgs";
import { DeleteTickArgs } from "./DeleteTickArgs";
import { Prediction } from "../../prediction/base/Prediction";
import { TickService } from "../tick.service";
@graphql.Resolver(() => Tick)
export class TickResolverBase {
  constructor(protected readonly service: TickService) {}

  async _ticksMeta(
    @graphql.Args() args: TickCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tick])
  async ticks(@graphql.Args() args: TickFindManyArgs): Promise<Tick[]> {
    return this.service.ticks(args);
  }

  @graphql.Query(() => Tick, { nullable: true })
  async tick(@graphql.Args() args: TickFindUniqueArgs): Promise<Tick | null> {
    const result = await this.service.tick(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tick)
  async createTick(@graphql.Args() args: CreateTickArgs): Promise<Tick> {
    return await this.service.createTick({
      ...args,
      data: {
        ...args.data,

        prediction: args.data.prediction
          ? {
              connect: args.data.prediction,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tick)
  async updateTick(@graphql.Args() args: UpdateTickArgs): Promise<Tick | null> {
    try {
      return await this.service.updateTick({
        ...args,
        data: {
          ...args.data,

          prediction: args.data.prediction
            ? {
                connect: args.data.prediction,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tick)
  async deleteTick(@graphql.Args() args: DeleteTickArgs): Promise<Tick | null> {
    try {
      return await this.service.deleteTick(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Prediction, {
    nullable: true,
    name: "prediction",
  })
  async getPrediction(
    @graphql.Parent() parent: Tick
  ): Promise<Prediction | null> {
    const result = await this.service.getPrediction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
