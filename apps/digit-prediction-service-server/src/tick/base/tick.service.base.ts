/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tick as PrismaTick,
  Prediction as PrismaPrediction,
} from "@prisma/client";

export class TickServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TickCountArgs, "select">): Promise<number> {
    return this.prisma.tick.count(args);
  }

  async ticks(args: Prisma.TickFindManyArgs): Promise<PrismaTick[]> {
    return this.prisma.tick.findMany(args);
  }
  async tick(args: Prisma.TickFindUniqueArgs): Promise<PrismaTick | null> {
    return this.prisma.tick.findUnique(args);
  }
  async createTick(args: Prisma.TickCreateArgs): Promise<PrismaTick> {
    return this.prisma.tick.create(args);
  }
  async updateTick(args: Prisma.TickUpdateArgs): Promise<PrismaTick> {
    return this.prisma.tick.update(args);
  }
  async deleteTick(args: Prisma.TickDeleteArgs): Promise<PrismaTick> {
    return this.prisma.tick.delete(args);
  }

  async getPrediction(parentId: string): Promise<PrismaPrediction | null> {
    return this.prisma.tick
      .findUnique({
        where: { id: parentId },
      })
      .prediction();
  }
}
